******************************** Using HasMap *****************************************************

TC - O(N)                              sc - O(constant) as (a-z) = 26 and (A-Z) = 26 all character stroe in a hashmap


<<<<<< doesnot run by map  >>>>>>>>



class Solution {
    public String longestPalindrome(String s) {
      Map<Character,Integer> map = new HashMap<>();
      for(int i = 0; i < s.length(); i++)
      {
          if(!map.containsKey(s.charAt(i))) map.put(s.charAt(i), 1);
          else map.put(s.charAt(i), map.get(s.charAt(i) + 1));
      }  
      int ans = 0;
      boolean isFirstOdd = false;
      
      for(Character key: map.keySet())
      {
          if(map.get(key) % 2 == 0)
          ans += map.get(key);
          
          else
          {
              if(isFirstOdd == false){
              ans += map.get(key);
              isFirstOdd = true;

              }
              else
              ans += map.get(key) - 1;
          }
      }
      return ans;
    }
}







*********************************************** Hash Array ****************************************************************


TC- O(N)   sc - O(1)



class Solution {
    public int longestPalindrome(String s) {
        int lowerCase[] = new int[26];
        int upperCase[] = new int[26];
        
        for(int i =0; i <s.length(); i++){
             char c = s.charAt(i);
            if(c-97 >=0){
                lowerCase[c-97]++;
            }else{
                upperCase[c-65]++;
            }
                
        } 
        
        int ans = 0;
        boolean isFirstOdd   = false;    
        for(int i = 0; i <26; i++){
           if(lowerCase[i]%2 ==0){
               ans += lowerCase[i];
           }else{
               if(isFirstOdd == false){
                 ans += lowerCase[i];      
                 isFirstOdd = true;
               }
               else
                ans += lowerCase[i]-1;
           }
        }
        
        
        
        for(int i = 0; i <26; i++){
        if(upperCase[i]%2 ==0){
               ans += upperCase[i];
           }else{
               if(isFirstOdd == false){
                 ans += upperCase[i];      
                 isFirstOdd = true;
               }
               else
                ans += upperCase[i]-1;
           }
        }
       return ans;
    }
}
